#!/bin/sh

# Environment variables ────────────────────────────────────────────────────────

XDG_DATA_HOME=${XDG_DATA_HOME:-~/.local/share}
KAKOUNE_CONNECT_SCRIPT=$XDG_DATA_HOME/kak/connect/script.sh

# Main ─────────────────────────────────────────────────────────────────────────

main() {

  # Send the edit command to the session / client.
  if test -n "$KAKOUNE_SESSION" -o -n "$KAKOUNE_CLIENT"; then
    edit "$@"

  # Try to connect to an existing session from a previous :connect-detach command.
  elif test -t 1 -a -e "$KAKOUNE_CONNECT_SCRIPT"; then
    attach

  # Create a session and attach if there is a terminal.
  elif test -t 1; then
    kak_session=$$
    # Start a connected shell or edit files.
    if test $# -eq 0; then
      cat <<EOF | sed -E 's/^ {8}//'
        Starting a shell connected to the '$kak_session' Kakoune session.

        • [e]dit to attach
        • CTRL-D to quit

        ❯ (connect-shell) █
EOF
      set -- "$SHELL"
    else
      set -- 'edit' "$@"
    fi
    # Start the session in daemon mode.
    setsid kak -s "$kak_session" -d < /dev/null > /dev/null 2>&1
    # Alias terminal to connect-detach and enter in the connect environment.
    # connect-detach allows to run CLI commands in the same terminal window.
    kak -c "$kak_session" -e "
      alias global terminal connect-detach
      set-option global connect_attach yes
      connect-terminal $@
    "
    # Attach the connect terminal command.
    # Act as a “boot loader”.
    if test -e "$KAKOUNE_CONNECT_SCRIPT"; then
      attach
    fi

  # GUI apps.
  else
    file=$1 line=$2 column=$3
    kak -ui dummy -e "
      new %{
        hook -always -once global ClientClose %val{client} kill!
        edit %{$file} $line $column
      }
    "
  fi
}

# Functions ────────────────────────────────────────────────────────────────────

attach() {
  mv "$KAKOUNE_CONNECT_SCRIPT" "$KAKOUNE_CONNECT_SCRIPT~"
  sh "$KAKOUNE_CONNECT_SCRIPT~"
  rm -f "$KAKOUNE_CONNECT_SCRIPT~"
}

main "$@"
